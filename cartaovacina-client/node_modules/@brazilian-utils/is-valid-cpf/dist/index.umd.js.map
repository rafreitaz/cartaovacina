{"version":3,"file":"index.umd.js","sources":["../src/constants.js","../src/index.js"],"sourcesContent":["export const BLACKLIST = [\n  '00000000000',\n  '11111111111',\n  '22222222222',\n  '33333333333',\n  '44444444444',\n  '55555555555',\n  '66666666666',\n  '77777777777',\n  '88888888888',\n  '99999999999',\n];\n\nexport const CPF_LENGTH = 11;\n\nexport const CHECK_DIGITS = [9, 10];\n","import onlyNumbers from '@brazilian-utils/helper-only-numbers';\nimport generateChecksum from '@brazilian-utils/helper-generate-checksum';\n\nimport { BLACKLIST, CPF_LENGTH, CHECK_DIGITS } from './constants';\n\nconst isValidLength = cpf => cpf.length === CPF_LENGTH;\n\nconst belongsToBlacklist = cpf => BLACKLIST.includes(cpf);\n\nconst isValidChecksum = cpf =>\n  CHECK_DIGITS.every(verifierPos => {\n    const mod = generateChecksum(cpf.slice(0, verifierPos).split(''), verifierPos + 1) % 11;\n    return cpf[verifierPos] === String(mod < 2 ? 0 : 11 - mod);\n  });\n\nexport default function isValidCpf(cpf) {\n  if (!cpf) return false;\n\n  const numericCPF = onlyNumbers(cpf);\n\n  return isValidLength(numericCPF) && !belongsToBlacklist(numericCPF) && isValidChecksum(numericCPF);\n}\n"],"names":["const","BLACKLIST","CHECK_DIGITS","isValidLength","cpf","length","belongsToBlacklist","includes","isValidChecksum","every","verifierPos","mod","generateChecksum","slice","split","String","numericCPF","onlyNumbers"],"mappings":"+dAAOA,IAAMC,GACX,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,eAKWC,GAAgB,EAAG,ICV1BC,WAAgBC,UDQI,KCRGA,EAAIC,QAE3BC,WAAqBF,UAAOH,EAAUM,SAASH,IAE/CI,WAAkBJ,UACtBF,EAAaO,eAAMC,GACjBV,IAAMW,EAAMC,EAAiBR,EAAIS,MAAM,EAAGH,GAAaI,MAAM,IAAKJ,EAAc,GAAK,GACrF,OAAON,EAAIM,KAAiBK,OAAOJ,EAAM,EAAI,EAAI,GAAKA,aAG3C,SAAoBP,GACjC,IAAKA,EAAK,OAAO,EAEjBJ,IAAMgB,EAAaC,EAAYb,GAE/B,OAAOD,EAAca,KAAgBV,EAAmBU,IAAeR,EAAgBQ"}