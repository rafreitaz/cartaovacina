import { Injectable, NgModule, InjectionToken } from '@angular/core';
import { finalize } from 'rxjs/operators';
import { BlockUIService, BLOCKUI_DEFAULT, BlockUIModule } from 'ng-block-ui';
import { HTTP_INTERCEPTORS } from '@angular/common/http';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var BlockUIHttpSettings = /** @class */ (function () {
    function BlockUIHttpSettings() {
        this.settings = {};
    }
    BlockUIHttpSettings.decorators = [
        { type: Injectable },
    ];
    return BlockUIHttpSettings;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var BlockUIInterceptor = /** @class */ (function () {
    function BlockUIInterceptor(blockUIService, BlockUIHttpSettings$$1) {
        this.blockUIService = blockUIService;
        this.BlockUIHttpSettings = BlockUIHttpSettings$$1;
        this.settings = {};
    }
    /**
     * @param {?} request
     * @param {?} next
     * @return {?}
     */
    BlockUIInterceptor.prototype.intercept = /**
     * @param {?} request
     * @param {?} next
     * @return {?}
     */
    function (request, next) {
        var _this = this;
        var /** @type {?} */ active = false;
        if (this.shouldBlock(request)) {
            this.blockUIService.start(BLOCKUI_DEFAULT);
            active = true;
        }
        return next.handle(request)
            .pipe(finalize(function () {
            active && _this.blockUIService.stop(BLOCKUI_DEFAULT);
        }));
    };
    /**
     * @param {?} request
     * @return {?}
     */
    BlockUIInterceptor.prototype.shouldBlock = /**
     * @param {?} request
     * @return {?}
     */
    function (request) {
        var method = request.method, urlWithParams = request.urlWithParams;
        var /** @type {?} */ settings = this.BlockUIHttpSettings.settings;
        var /** @type {?} */ requestFilters = settings.requestFilters || [];
        return !requestFilters.some(function (f) {
            if (f && f.method && f.url) {
                return f.method.toUpperCase() === method && f.url.test(urlWithParams);
            }
            else if (typeof f === 'function') {
                return f(request);
            }
            return f.test(urlWithParams);
        });
    };
    BlockUIInterceptor.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    BlockUIInterceptor.ctorParameters = function () { return [
        { type: BlockUIService },
        { type: BlockUIHttpSettings }
    ]; };
    return BlockUIInterceptor;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
// Needed for AOT compiling
var /** @type {?} */ BlockUIHttpModuleSettings = new InjectionToken('BlockUIHttpModuleSettings');
/**
 * @param {?} settings
 * @return {?}
 */
function provideSettingsInstance(settings) {
    return { settings: settings };
}
var BlockUIHttpModule = /** @class */ (function () {
    function BlockUIHttpModule() {
    }
    /**
     * @param {?=} settings
     * @return {?}
     */
    BlockUIHttpModule.forRoot = /**
     * @param {?=} settings
     * @return {?}
     */
    function (settings) {
        if (settings === void 0) { settings = {}; }
        return {
            ngModule: BlockUIHttpModule,
            providers: [
                {
                    provide: BlockUIHttpModuleSettings,
                    useValue: settings
                },
                {
                    provide: BlockUIHttpSettings,
                    useFactory: provideSettingsInstance,
                    deps: [BlockUIHttpModuleSettings]
                },
                {
                    provide: HTTP_INTERCEPTORS,
                    useClass: BlockUIInterceptor,
                    multi: true
                }
            ]
        };
    };
    BlockUIHttpModule.decorators = [
        { type: NgModule, args: [{
                    imports: [BlockUIModule]
                },] },
    ];
    return BlockUIHttpModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { BlockUIHttpModule, BlockUIHttpSettings as ɵc, BlockUIInterceptor as ɵd, BlockUIHttpModuleSettings as ɵa, provideSettingsInstance as ɵb };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctYmxvY2stdWktaHR0cC5qcy5tYXAiLCJzb3VyY2VzIjpbIm5nOi8vbmctYmxvY2stdWkvaHR0cC9ibG9jay11aS1odHRwLXNldHRpbmdzLnNlcnZpY2UudHMiLCJuZzovL25nLWJsb2NrLXVpL2h0dHAvYmxvY2stdWktaHR0cC5pbnRlcmNlcHRvci50cyIsIm5nOi8vbmctYmxvY2stdWkvaHR0cC9ibG9jay11aS1odHRwLm1vZHVsZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBIdHRwU2V0dGluZ3MgfSBmcm9tICduZy1ibG9jay11aSc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBCbG9ja1VJSHR0cFNldHRpbmdzIHtcbiAgc2V0dGluZ3M6IEh0dHBTZXR0aW5ncyA9IHt9O1xufVxuIiwiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtcbiAgSHR0cFJlcXVlc3QsXG4gIEh0dHBIYW5kbGVyLFxuICBIdHRwRXZlbnQsXG4gIEh0dHBJbnRlcmNlcHRvclxufSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBmaW5hbGl6ZSB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IEJsb2NrVUlTZXJ2aWNlLCBCTE9DS1VJX0RFRkFVTFQgfSBmcm9tICduZy1ibG9jay11aSc7XG5pbXBvcnQgeyBCbG9ja1VJSHR0cFNldHRpbmdzIH0gZnJvbSAnLi9ibG9jay11aS1odHRwLXNldHRpbmdzLnNlcnZpY2UnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQmxvY2tVSUludGVyY2VwdG9yIGltcGxlbWVudHMgSHR0cEludGVyY2VwdG9yIHtcbiAgcHJpdmF0ZSBzZXR0aW5nczogYW55ID0ge307XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBibG9ja1VJU2VydmljZTogQmxvY2tVSVNlcnZpY2UsXG4gICAgcHJpdmF0ZSBCbG9ja1VJSHR0cFNldHRpbmdzOiBCbG9ja1VJSHR0cFNldHRpbmdzXG4gICkge31cblxuICBpbnRlcmNlcHQocmVxdWVzdDogSHR0cFJlcXVlc3Q8YW55PiwgbmV4dDogSHR0cEhhbmRsZXIpOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxhbnk+PiB7XG4gICAgbGV0IGFjdGl2ZSA9IGZhbHNlO1xuXG4gICAgaWYgKHRoaXMuc2hvdWxkQmxvY2socmVxdWVzdCkpIHtcbiAgICAgIHRoaXMuYmxvY2tVSVNlcnZpY2Uuc3RhcnQoQkxPQ0tVSV9ERUZBVUxUKTtcbiAgICAgIGFjdGl2ZSA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5leHQuaGFuZGxlKHJlcXVlc3QpXG4gICAgICAucGlwZShcbiAgICAgICAgZmluYWxpemUoKCkgPT4ge1xuICAgICAgICAgIGFjdGl2ZSAmJiB0aGlzLmJsb2NrVUlTZXJ2aWNlLnN0b3AoQkxPQ0tVSV9ERUZBVUxUKTtcbiAgICAgICAgfSlcbiAgICAgICk7XG4gIH1cblxuICBzaG91bGRCbG9jayhyZXF1ZXN0OiBIdHRwUmVxdWVzdDxhbnk+KTogYm9vbGVhbiB7XG4gICAgY29uc3QgeyBtZXRob2QsIHVybFdpdGhQYXJhbXMgfSA9IHJlcXVlc3Q7XG4gICAgY29uc3Qgc2V0dGluZ3MgPSB0aGlzLkJsb2NrVUlIdHRwU2V0dGluZ3Muc2V0dGluZ3M7XG4gICAgY29uc3QgcmVxdWVzdEZpbHRlcnMgPSBzZXR0aW5ncy5yZXF1ZXN0RmlsdGVycyB8fCBbXTtcblxuICAgIHJldHVybiAhcmVxdWVzdEZpbHRlcnMuc29tZSgoZjogYW55KSA9PiB7XG4gICAgICBpZiAoZiAmJiBmLm1ldGhvZCAmJiBmLnVybCkge1xuICAgICAgICByZXR1cm4gZi5tZXRob2QudG9VcHBlckNhc2UoKSA9PT0gbWV0aG9kICYmIGYudXJsLnRlc3QodXJsV2l0aFBhcmFtcyk7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBmID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBmKHJlcXVlc3QpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZi50ZXN0KHVybFdpdGhQYXJhbXMpO1xuICAgIH0pO1xuICB9XG59XG4iLCJpbXBvcnQgeyBOZ01vZHVsZSwgTW9kdWxlV2l0aFByb3ZpZGVycywgSW5qZWN0aW9uVG9rZW4gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEhUVFBfSU5URVJDRVBUT1JTIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgQmxvY2tVSU1vZHVsZSwgSHR0cFNldHRpbmdzIH0gZnJvbSAnbmctYmxvY2stdWknO1xuaW1wb3J0IHsgQmxvY2tVSUh0dHBTZXR0aW5ncyB9IGZyb20gJy4vYmxvY2stdWktaHR0cC1zZXR0aW5ncy5zZXJ2aWNlJztcbmltcG9ydCB7IEJsb2NrVUlJbnRlcmNlcHRvciB9IGZyb20gJy4vYmxvY2stdWktaHR0cC5pbnRlcmNlcHRvcic7XG5cblxuLy8gTmVlZGVkIGZvciBBT1QgY29tcGlsaW5nXG5leHBvcnQgY29uc3QgQmxvY2tVSUh0dHBNb2R1bGVTZXR0aW5ncyA9IG5ldyBJbmplY3Rpb25Ub2tlbjxzdHJpbmc+KCdCbG9ja1VJSHR0cE1vZHVsZVNldHRpbmdzJyk7XG5cbmV4cG9ydCBmdW5jdGlvbiBwcm92aWRlU2V0dGluZ3NJbnN0YW5jZShzZXR0aW5nczogSHR0cFNldHRpbmdzKTogQmxvY2tVSUh0dHBTZXR0aW5ncyB7XG4gIHJldHVybiB7IHNldHRpbmdzIH07XG59XG5cbkBOZ01vZHVsZSh7XG4gIGltcG9ydHM6IFtCbG9ja1VJTW9kdWxlXVxufSlcbmV4cG9ydCBjbGFzcyBCbG9ja1VJSHR0cE1vZHVsZSB7XG4gIHB1YmxpYyBzdGF0aWMgZm9yUm9vdChzZXR0aW5nczogSHR0cFNldHRpbmdzID0ge30pOiBNb2R1bGVXaXRoUHJvdmlkZXJzIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmdNb2R1bGU6IEJsb2NrVUlIdHRwTW9kdWxlLFxuICAgICAgcHJvdmlkZXJzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBwcm92aWRlOiBCbG9ja1VJSHR0cE1vZHVsZVNldHRpbmdzLFxuICAgICAgICAgIHVzZVZhbHVlOiBzZXR0aW5nc1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgcHJvdmlkZTogQmxvY2tVSUh0dHBTZXR0aW5ncyxcbiAgICAgICAgICB1c2VGYWN0b3J5OiBwcm92aWRlU2V0dGluZ3NJbnN0YW5jZSxcbiAgICAgICAgICBkZXBzOiBbQmxvY2tVSUh0dHBNb2R1bGVTZXR0aW5nc11cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHByb3ZpZGU6IEhUVFBfSU5URVJDRVBUT1JTLFxuICAgICAgICAgIHVzZUNsYXNzOiBCbG9ja1VJSW50ZXJjZXB0b3IsXG4gICAgICAgICAgbXVsdGk6IHRydWVcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH07XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJCbG9ja1VJSHR0cFNldHRpbmdzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTs7d0JBSzJCLEVBQUU7OztnQkFGNUIsVUFBVTs7OEJBSFg7Ozs7Ozs7QUNBQTtJQWdCRSw0QkFDVSxnQkFDQUE7UUFEQSxtQkFBYyxHQUFkLGNBQWM7UUFDZCx3QkFBbUIsR0FBbkJBLHNCQUFtQjt3QkFKTCxFQUFFO0tBS3RCOzs7Ozs7SUFFSixzQ0FBUzs7Ozs7SUFBVCxVQUFVLE9BQXlCLEVBQUUsSUFBaUI7UUFBdEQsaUJBY0M7UUFiQyxxQkFBSSxNQUFNLEdBQUcsS0FBSyxDQUFDO1FBRW5CLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsRUFBRTtZQUM3QixJQUFJLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxlQUFlLENBQUMsQ0FBQztZQUMzQyxNQUFNLEdBQUcsSUFBSSxDQUFDO1NBQ2Y7UUFFRCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDO2FBQ3hCLElBQUksQ0FDSCxRQUFRLENBQUM7WUFDUCxNQUFNLElBQUksS0FBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7U0FDckQsQ0FBQyxDQUNILENBQUM7S0FDTDs7Ozs7SUFFRCx3Q0FBVzs7OztJQUFYLFVBQVksT0FBeUI7UUFDM0IsSUFBQSx1QkFBTSxFQUFFLHFDQUFhLENBQWE7UUFDMUMscUJBQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxRQUFRLENBQUM7UUFDbkQscUJBQU0sY0FBYyxHQUFHLFFBQVEsQ0FBQyxjQUFjLElBQUksRUFBRSxDQUFDO1FBRXJELE9BQU8sQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLFVBQUMsQ0FBTTtZQUNqQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxJQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUU7Z0JBQzFCLE9BQU8sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxXQUFXLEVBQUUsS0FBSyxNQUFNLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7YUFDdkU7aUJBQU0sSUFBSSxPQUFPLENBQUMsS0FBSyxVQUFVLEVBQUU7Z0JBQ2xDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDO2FBQ25CO1lBRUQsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1NBQzlCLENBQUMsQ0FBQztLQUNKOztnQkF2Q0YsVUFBVTs7OztnQkFIRixjQUFjO2dCQUNkLG1CQUFtQjs7NkJBVjVCOzs7Ozs7O0FDQUE7QUFRQSxxQkFBYSx5QkFBeUIsR0FBRyxJQUFJLGNBQWMsQ0FBUywyQkFBMkIsQ0FBQyxDQUFDOzs7OztBQUVqRyxpQ0FBd0MsUUFBc0I7SUFDNUQsT0FBTyxFQUFFLFFBQVEsVUFBQSxFQUFFLENBQUM7Q0FDckI7Ozs7Ozs7O0lBTWUseUJBQU87Ozs7Y0FBQyxRQUEyQjtRQUEzQix5QkFBQSxFQUFBLGFBQTJCO1FBQy9DLE9BQU87WUFDTCxRQUFRLEVBQUUsaUJBQWlCO1lBQzNCLFNBQVMsRUFBRTtnQkFDVDtvQkFDRSxPQUFPLEVBQUUseUJBQXlCO29CQUNsQyxRQUFRLEVBQUUsUUFBUTtpQkFDbkI7Z0JBQ0Q7b0JBQ0UsT0FBTyxFQUFFLG1CQUFtQjtvQkFDNUIsVUFBVSxFQUFFLHVCQUF1QjtvQkFDbkMsSUFBSSxFQUFFLENBQUMseUJBQXlCLENBQUM7aUJBQ2xDO2dCQUNEO29CQUNFLE9BQU8sRUFBRSxpQkFBaUI7b0JBQzFCLFFBQVEsRUFBRSxrQkFBa0I7b0JBQzVCLEtBQUssRUFBRSxJQUFJO2lCQUNaO2FBQ0Y7U0FDRixDQUFDOzs7Z0JBdkJMLFFBQVEsU0FBQztvQkFDUixPQUFPLEVBQUUsQ0FBQyxhQUFhLENBQUM7aUJBQ3pCOzs0QkFoQkQ7Ozs7Ozs7Ozs7Ozs7OzsifQ==