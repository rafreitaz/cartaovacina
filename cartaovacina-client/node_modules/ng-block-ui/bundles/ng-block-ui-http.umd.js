(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs/operators'), require('ng-block-ui'), require('@angular/common/http')) :
    typeof define === 'function' && define.amd ? define('ng-block-ui/http', ['exports', '@angular/core', 'rxjs/operators', 'ng-block-ui', '@angular/common/http'], factory) :
    (factory((global['ng-block-ui'] = global['ng-block-ui'] || {}, global['ng-block-ui'].http = {}),global.ng.core,global.rxjs.operators,global['ng-block-ui'],global.ng.common.http));
}(this, (function (exports,core,operators,ngBlockUi,http) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var BlockUIHttpSettings = (function () {
        function BlockUIHttpSettings() {
            this.settings = {};
        }
        BlockUIHttpSettings.decorators = [
            { type: core.Injectable },
        ];
        return BlockUIHttpSettings;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var BlockUIInterceptor = (function () {
        function BlockUIInterceptor(blockUIService, BlockUIHttpSettings$$1) {
            this.blockUIService = blockUIService;
            this.BlockUIHttpSettings = BlockUIHttpSettings$$1;
            this.settings = {};
        }
        /**
         * @param {?} request
         * @param {?} next
         * @return {?}
         */
        BlockUIInterceptor.prototype.intercept = /**
         * @param {?} request
         * @param {?} next
         * @return {?}
         */
            function (request, next) {
                var _this = this;
                var /** @type {?} */ active = false;
                if (this.shouldBlock(request)) {
                    this.blockUIService.start(ngBlockUi.BLOCKUI_DEFAULT);
                    active = true;
                }
                return next.handle(request)
                    .pipe(operators.finalize(function () {
                    active && _this.blockUIService.stop(ngBlockUi.BLOCKUI_DEFAULT);
                }));
            };
        /**
         * @param {?} request
         * @return {?}
         */
        BlockUIInterceptor.prototype.shouldBlock = /**
         * @param {?} request
         * @return {?}
         */
            function (request) {
                var method = request.method, urlWithParams = request.urlWithParams;
                var /** @type {?} */ settings = this.BlockUIHttpSettings.settings;
                var /** @type {?} */ requestFilters = settings.requestFilters || [];
                return !requestFilters.some(function (f) {
                    if (f && f.method && f.url) {
                        return f.method.toUpperCase() === method && f.url.test(urlWithParams);
                    }
                    else if (typeof f === 'function') {
                        return f(request);
                    }
                    return f.test(urlWithParams);
                });
            };
        BlockUIInterceptor.decorators = [
            { type: core.Injectable },
        ];
        /** @nocollapse */
        BlockUIInterceptor.ctorParameters = function () {
            return [
                { type: ngBlockUi.BlockUIService },
                { type: BlockUIHttpSettings }
            ];
        };
        return BlockUIInterceptor;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    // Needed for AOT compiling
    var /** @type {?} */ BlockUIHttpModuleSettings = new core.InjectionToken('BlockUIHttpModuleSettings');
    /**
     * @param {?} settings
     * @return {?}
     */
    function provideSettingsInstance(settings) {
        return { settings: settings };
    }
    var BlockUIHttpModule = (function () {
        function BlockUIHttpModule() {
        }
        /**
         * @param {?=} settings
         * @return {?}
         */
        BlockUIHttpModule.forRoot = /**
         * @param {?=} settings
         * @return {?}
         */
            function (settings) {
                if (settings === void 0) {
                    settings = {};
                }
                return {
                    ngModule: BlockUIHttpModule,
                    providers: [
                        {
                            provide: BlockUIHttpModuleSettings,
                            useValue: settings
                        },
                        {
                            provide: BlockUIHttpSettings,
                            useFactory: provideSettingsInstance,
                            deps: [BlockUIHttpModuleSettings]
                        },
                        {
                            provide: http.HTTP_INTERCEPTORS,
                            useClass: BlockUIInterceptor,
                            multi: true
                        }
                    ]
                };
            };
        BlockUIHttpModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [ngBlockUi.BlockUIModule]
                    },] },
        ];
        return BlockUIHttpModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    exports.BlockUIHttpModule = BlockUIHttpModule;
    exports.ɵc = BlockUIHttpSettings;
    exports.ɵd = BlockUIInterceptor;
    exports.ɵa = BlockUIHttpModuleSettings;
    exports.ɵb = provideSettingsInstance;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctYmxvY2stdWktaHR0cC51bWQuanMubWFwIiwic291cmNlcyI6WyJuZzovL25nLWJsb2NrLXVpL2h0dHAvYmxvY2stdWktaHR0cC1zZXR0aW5ncy5zZXJ2aWNlLnRzIiwibmc6Ly9uZy1ibG9jay11aS9odHRwL2Jsb2NrLXVpLWh0dHAuaW50ZXJjZXB0b3IudHMiLCJuZzovL25nLWJsb2NrLXVpL2h0dHAvYmxvY2stdWktaHR0cC5tb2R1bGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSHR0cFNldHRpbmdzIH0gZnJvbSAnbmctYmxvY2stdWknO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQmxvY2tVSUh0dHBTZXR0aW5ncyB7XG4gIHNldHRpbmdzOiBIdHRwU2V0dGluZ3MgPSB7fTtcbn1cbiIsImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7XG4gIEh0dHBSZXF1ZXN0LFxuICBIdHRwSGFuZGxlcixcbiAgSHR0cEV2ZW50LFxuICBIdHRwSW50ZXJjZXB0b3Jcbn0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgZmluYWxpemUgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBCbG9ja1VJU2VydmljZSwgQkxPQ0tVSV9ERUZBVUxUIH0gZnJvbSAnbmctYmxvY2stdWknO1xuaW1wb3J0IHsgQmxvY2tVSUh0dHBTZXR0aW5ncyB9IGZyb20gJy4vYmxvY2stdWktaHR0cC1zZXR0aW5ncy5zZXJ2aWNlJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEJsb2NrVUlJbnRlcmNlcHRvciBpbXBsZW1lbnRzIEh0dHBJbnRlcmNlcHRvciB7XG4gIHByaXZhdGUgc2V0dGluZ3M6IGFueSA9IHt9O1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgYmxvY2tVSVNlcnZpY2U6IEJsb2NrVUlTZXJ2aWNlLFxuICAgIHByaXZhdGUgQmxvY2tVSUh0dHBTZXR0aW5nczogQmxvY2tVSUh0dHBTZXR0aW5nc1xuICApIHt9XG5cbiAgaW50ZXJjZXB0KHJlcXVlc3Q6IEh0dHBSZXF1ZXN0PGFueT4sIG5leHQ6IEh0dHBIYW5kbGVyKTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8YW55Pj4ge1xuICAgIGxldCBhY3RpdmUgPSBmYWxzZTtcblxuICAgIGlmICh0aGlzLnNob3VsZEJsb2NrKHJlcXVlc3QpKSB7XG4gICAgICB0aGlzLmJsb2NrVUlTZXJ2aWNlLnN0YXJ0KEJMT0NLVUlfREVGQVVMVCk7XG4gICAgICBhY3RpdmUgPSB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBuZXh0LmhhbmRsZShyZXF1ZXN0KVxuICAgICAgLnBpcGUoXG4gICAgICAgIGZpbmFsaXplKCgpID0+IHtcbiAgICAgICAgICBhY3RpdmUgJiYgdGhpcy5ibG9ja1VJU2VydmljZS5zdG9wKEJMT0NLVUlfREVGQVVMVCk7XG4gICAgICAgIH0pXG4gICAgICApO1xuICB9XG5cbiAgc2hvdWxkQmxvY2socmVxdWVzdDogSHR0cFJlcXVlc3Q8YW55Pik6IGJvb2xlYW4ge1xuICAgIGNvbnN0IHsgbWV0aG9kLCB1cmxXaXRoUGFyYW1zIH0gPSByZXF1ZXN0O1xuICAgIGNvbnN0IHNldHRpbmdzID0gdGhpcy5CbG9ja1VJSHR0cFNldHRpbmdzLnNldHRpbmdzO1xuICAgIGNvbnN0IHJlcXVlc3RGaWx0ZXJzID0gc2V0dGluZ3MucmVxdWVzdEZpbHRlcnMgfHwgW107XG5cbiAgICByZXR1cm4gIXJlcXVlc3RGaWx0ZXJzLnNvbWUoKGY6IGFueSkgPT4ge1xuICAgICAgaWYgKGYgJiYgZi5tZXRob2QgJiYgZi51cmwpIHtcbiAgICAgICAgcmV0dXJuIGYubWV0aG9kLnRvVXBwZXJDYXNlKCkgPT09IG1ldGhvZCAmJiBmLnVybC50ZXN0KHVybFdpdGhQYXJhbXMpO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgZiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gZihyZXF1ZXN0KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGYudGVzdCh1cmxXaXRoUGFyYW1zKTtcbiAgICB9KTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgTmdNb2R1bGUsIE1vZHVsZVdpdGhQcm92aWRlcnMsIEluamVjdGlvblRva2VuIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBIVFRQX0lOVEVSQ0VQVE9SUyB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IEJsb2NrVUlNb2R1bGUsIEh0dHBTZXR0aW5ncyB9IGZyb20gJ25nLWJsb2NrLXVpJztcbmltcG9ydCB7IEJsb2NrVUlIdHRwU2V0dGluZ3MgfSBmcm9tICcuL2Jsb2NrLXVpLWh0dHAtc2V0dGluZ3Muc2VydmljZSc7XG5pbXBvcnQgeyBCbG9ja1VJSW50ZXJjZXB0b3IgfSBmcm9tICcuL2Jsb2NrLXVpLWh0dHAuaW50ZXJjZXB0b3InO1xuXG5cbi8vIE5lZWRlZCBmb3IgQU9UIGNvbXBpbGluZ1xuZXhwb3J0IGNvbnN0IEJsb2NrVUlIdHRwTW9kdWxlU2V0dGluZ3MgPSBuZXcgSW5qZWN0aW9uVG9rZW48c3RyaW5nPignQmxvY2tVSUh0dHBNb2R1bGVTZXR0aW5ncycpO1xuXG5leHBvcnQgZnVuY3Rpb24gcHJvdmlkZVNldHRpbmdzSW5zdGFuY2Uoc2V0dGluZ3M6IEh0dHBTZXR0aW5ncyk6IEJsb2NrVUlIdHRwU2V0dGluZ3Mge1xuICByZXR1cm4geyBzZXR0aW5ncyB9O1xufVxuXG5ATmdNb2R1bGUoe1xuICBpbXBvcnRzOiBbQmxvY2tVSU1vZHVsZV1cbn0pXG5leHBvcnQgY2xhc3MgQmxvY2tVSUh0dHBNb2R1bGUge1xuICBwdWJsaWMgc3RhdGljIGZvclJvb3Qoc2V0dGluZ3M6IEh0dHBTZXR0aW5ncyA9IHt9KTogTW9kdWxlV2l0aFByb3ZpZGVycyB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5nTW9kdWxlOiBCbG9ja1VJSHR0cE1vZHVsZSxcbiAgICAgIHByb3ZpZGVyczogW1xuICAgICAgICB7XG4gICAgICAgICAgcHJvdmlkZTogQmxvY2tVSUh0dHBNb2R1bGVTZXR0aW5ncyxcbiAgICAgICAgICB1c2VWYWx1ZTogc2V0dGluZ3NcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHByb3ZpZGU6IEJsb2NrVUlIdHRwU2V0dGluZ3MsXG4gICAgICAgICAgdXNlRmFjdG9yeTogcHJvdmlkZVNldHRpbmdzSW5zdGFuY2UsXG4gICAgICAgICAgZGVwczogW0Jsb2NrVUlIdHRwTW9kdWxlU2V0dGluZ3NdXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBwcm92aWRlOiBIVFRQX0lOVEVSQ0VQVE9SUyxcbiAgICAgICAgICB1c2VDbGFzczogQmxvY2tVSUludGVyY2VwdG9yLFxuICAgICAgICAgIG11bHRpOiB0cnVlXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9O1xuICB9XG59XG4iXSwibmFtZXMiOlsiSW5qZWN0YWJsZSIsIkJsb2NrVUlIdHRwU2V0dGluZ3MiLCJCTE9DS1VJX0RFRkFVTFQiLCJmaW5hbGl6ZSIsIkJsb2NrVUlTZXJ2aWNlIiwiSW5qZWN0aW9uVG9rZW4iLCJIVFRQX0lOVEVSQ0VQVE9SUyIsIk5nTW9kdWxlIiwiQmxvY2tVSU1vZHVsZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBOzs0QkFLMkIsRUFBRTs7O29CQUY1QkEsZUFBVTs7a0NBSFg7Ozs7Ozs7QUNBQTtRQWdCRSw0QkFDVSxnQkFDQUM7WUFEQSxtQkFBYyxHQUFkLGNBQWM7WUFDZCx3QkFBbUIsR0FBbkJBLHNCQUFtQjs0QkFKTCxFQUFFO1NBS3RCOzs7Ozs7UUFFSixzQ0FBUzs7Ozs7WUFBVCxVQUFVLE9BQXlCLEVBQUUsSUFBaUI7Z0JBQXRELGlCQWNDO2dCQWJDLHFCQUFJLE1BQU0sR0FBRyxLQUFLLENBQUM7Z0JBRW5CLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsRUFBRTtvQkFDN0IsSUFBSSxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUNDLHlCQUFlLENBQUMsQ0FBQztvQkFDM0MsTUFBTSxHQUFHLElBQUksQ0FBQztpQkFDZjtnQkFFRCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDO3FCQUN4QixJQUFJLENBQ0hDLGtCQUFRLENBQUM7b0JBQ1AsTUFBTSxJQUFJLEtBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDRCx5QkFBZSxDQUFDLENBQUM7aUJBQ3JELENBQUMsQ0FDSCxDQUFDO2FBQ0w7Ozs7O1FBRUQsd0NBQVc7Ozs7WUFBWCxVQUFZLE9BQXlCO2dCQUMzQixJQUFBLHVCQUFNLEVBQUUscUNBQWEsQ0FBYTtnQkFDMUMscUJBQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxRQUFRLENBQUM7Z0JBQ25ELHFCQUFNLGNBQWMsR0FBRyxRQUFRLENBQUMsY0FBYyxJQUFJLEVBQUUsQ0FBQztnQkFFckQsT0FBTyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsVUFBQyxDQUFNO29CQUNqQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxJQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUU7d0JBQzFCLE9BQU8sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxXQUFXLEVBQUUsS0FBSyxNQUFNLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7cUJBQ3ZFO3lCQUFNLElBQUksT0FBTyxDQUFDLEtBQUssVUFBVSxFQUFFO3dCQUNsQyxPQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQztxQkFDbkI7b0JBRUQsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO2lCQUM5QixDQUFDLENBQUM7YUFDSjs7b0JBdkNGRixlQUFVOzs7Ozt3QkFIRkksd0JBQWM7d0JBQ2QsbUJBQW1COzs7aUNBVjVCOzs7Ozs7O0FDQUE7QUFRQSx5QkFBYSx5QkFBeUIsR0FBRyxJQUFJQyxtQkFBYyxDQUFTLDJCQUEyQixDQUFDLENBQUM7Ozs7O0FBRWpHLHFDQUF3QyxRQUFzQjtRQUM1RCxPQUFPLEVBQUUsUUFBUSxVQUFBLEVBQUUsQ0FBQztLQUNyQjs7Ozs7Ozs7UUFNZSx5QkFBTzs7OztzQkFBQyxRQUEyQjtnQkFBM0IseUJBQUE7b0JBQUEsYUFBMkI7O2dCQUMvQyxPQUFPO29CQUNMLFFBQVEsRUFBRSxpQkFBaUI7b0JBQzNCLFNBQVMsRUFBRTt3QkFDVDs0QkFDRSxPQUFPLEVBQUUseUJBQXlCOzRCQUNsQyxRQUFRLEVBQUUsUUFBUTt5QkFDbkI7d0JBQ0Q7NEJBQ0UsT0FBTyxFQUFFLG1CQUFtQjs0QkFDNUIsVUFBVSxFQUFFLHVCQUF1Qjs0QkFDbkMsSUFBSSxFQUFFLENBQUMseUJBQXlCLENBQUM7eUJBQ2xDO3dCQUNEOzRCQUNFLE9BQU8sRUFBRUMsc0JBQWlCOzRCQUMxQixRQUFRLEVBQUUsa0JBQWtCOzRCQUM1QixLQUFLLEVBQUUsSUFBSTt5QkFDWjtxQkFDRjtpQkFDRixDQUFDOzs7b0JBdkJMQyxhQUFRLFNBQUM7d0JBQ1IsT0FBTyxFQUFFLENBQUNDLHVCQUFhLENBQUM7cUJBQ3pCOztnQ0FoQkQ7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsifQ==