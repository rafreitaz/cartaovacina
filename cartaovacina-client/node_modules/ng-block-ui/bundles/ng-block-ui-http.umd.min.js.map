{"version":3,"sources":["ng://ng-block-ui/http/block-ui-http-settings.service.ts","ng://ng-block-ui/http/block-ui-http.interceptor.ts","ng://ng-block-ui/http/block-ui-http.module.ts"],"names":["BlockUIHttpSettings","Injectable","BlockUIInterceptor","blockUIService","this","prototype","intercept","request","next","_this","active","shouldBlock","start","BLOCKUI_DEFAULT","handle","pipe","finalize","stop","method","urlWithParams","settings","requestFilters","some","f","url","toUpperCase","test","BlockUIService","BlockUIHttpModuleSettings","InjectionToken","provideSettingsInstance","BlockUIHttpModule","forRoot","ngModule","providers","provide","useValue","useFactory","deps","HTTP_INTERCEPTORS","useClass","multi","NgModule","args","imports","BlockUIModule"],"mappings":"sfAAA,IAAAA,EAAA,oEAGCC,EAAAA,eAHD,GCAAC,EAAA,WAgBE,SAAAA,EACUC,EACAH,GADAI,KAAAD,eAAAA,EACAC,KAAAJ,oBAAAA,0BAGVE,EAAAG,UAAAC,UAAA,SAAUC,EAA2BC,GAArC,IAAAC,EAAAL,KACMM,GAAS,EAOb,OALIN,KAAKO,YAAYJ,KACnBH,KAAKD,eAAeS,MAAMC,EAAAA,iBAC1BH,GAAS,GAGJF,EAAKM,OAAOP,GAChBQ,KACCC,EAAAA,SAAS,WACPN,GAAUD,EAAKN,eAAec,KAAKJ,EAAAA,qBAK3CX,EAAAG,UAAAM,YAAA,SAAYJ,GACF,IAAAW,EAAAX,EAAAW,OAAQC,EAAAZ,EAAAY,cAIhB,QAHiBf,KAAKJ,oBAAoBoB,SACVC,oBAETC,KAAK,SAACC,GAC3B,OAAIA,GAAKA,EAAEL,QAAUK,EAAEC,IACdD,EAAEL,OAAOO,gBAAkBP,GAAUK,EAAEC,IAAIE,KAAKP,GACjC,mBAANI,EACTA,EAAEhB,GAGJgB,EAAEG,KAAKP,0BArCnBlB,EAAAA,sDAHQ0B,EAAAA,sBACA3B,OAVT,GCQa4B,EAA4B,IAAIC,EAAAA,eAAuB,6BAEpE,SAAAC,EAAwCV,GACtC,OAASA,SAAQA,yCAOHW,EAAAC,iBAAQZ,GACpB,YADoB,IAAAA,IAAAA,OAElBa,SAAUF,EACVG,YAEIC,QAASP,EACTQ,SAAUhB,IAGVe,QAASnC,EACTqC,WAAYP,EACZQ,MAAOV,KAGPO,QAASI,EAAAA,kBACTC,SAAUtC,EACVuC,OAAO,0BApBhBC,EAAAA,SAAQC,OACPC,SAAUC,EAAAA","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpSettings } from 'ng-block-ui';\n\n@Injectable()\nexport class BlockUIHttpSettings {\n  settings: HttpSettings = {};\n}\n","import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { finalize } from 'rxjs/operators';\nimport { BlockUIService, BLOCKUI_DEFAULT } from 'ng-block-ui';\nimport { BlockUIHttpSettings } from './block-ui-http-settings.service';\n\n@Injectable()\nexport class BlockUIInterceptor implements HttpInterceptor {\n  private settings: any = {};\n\n  constructor(\n    private blockUIService: BlockUIService,\n    private BlockUIHttpSettings: BlockUIHttpSettings\n  ) {}\n\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    let active = false;\n\n    if (this.shouldBlock(request)) {\n      this.blockUIService.start(BLOCKUI_DEFAULT);\n      active = true;\n    }\n\n    return next.handle(request)\n      .pipe(\n        finalize(() => {\n          active && this.blockUIService.stop(BLOCKUI_DEFAULT);\n        })\n      );\n  }\n\n  shouldBlock(request: HttpRequest<any>): boolean {\n    const { method, urlWithParams } = request;\n    const settings = this.BlockUIHttpSettings.settings;\n    const requestFilters = settings.requestFilters || [];\n\n    return !requestFilters.some((f: any) => {\n      if (f && f.method && f.url) {\n        return f.method.toUpperCase() === method && f.url.test(urlWithParams);\n      } else if (typeof f === 'function') {\n        return f(request);\n      }\n\n      return f.test(urlWithParams);\n    });\n  }\n}\n","import { NgModule, ModuleWithProviders, InjectionToken } from '@angular/core';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { BlockUIModule, HttpSettings } from 'ng-block-ui';\nimport { BlockUIHttpSettings } from './block-ui-http-settings.service';\nimport { BlockUIInterceptor } from './block-ui-http.interceptor';\n\n\n// Needed for AOT compiling\nexport const BlockUIHttpModuleSettings = new InjectionToken<string>('BlockUIHttpModuleSettings');\n\nexport function provideSettingsInstance(settings: HttpSettings): BlockUIHttpSettings {\n  return { settings };\n}\n\n@NgModule({\n  imports: [BlockUIModule]\n})\nexport class BlockUIHttpModule {\n  public static forRoot(settings: HttpSettings = {}): ModuleWithProviders {\n    return {\n      ngModule: BlockUIHttpModule,\n      providers: [\n        {\n          provide: BlockUIHttpModuleSettings,\n          useValue: settings\n        },\n        {\n          provide: BlockUIHttpSettings,\n          useFactory: provideSettingsInstance,\n          deps: [BlockUIHttpModuleSettings]\n        },\n        {\n          provide: HTTP_INTERCEPTORS,\n          useClass: BlockUIInterceptor,\n          multi: true\n        }\n      ]\n    };\n  }\n}\n"]}